name: Go build

on:
  push:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
      - LICENSE
      - '**.svg'
      - '.github/workflows/docs.yml'
      - '.github/workflows/mkdocs-set-default-version.yml'
      - 'mkdocs.yml'
  pull_request:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
      - LICENSE
      - '**.svg'
      - '.github/workflows/docs.yml'
      - '.github/workflows/mkdocs-set-default-version.yml'
      - 'mkdocs.yml'

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest

    outputs:
      smoketest-matrix: ${{ steps.generate-smoketest-matrix.outputs.smoketests }}
      autopilot-matrix: ${{ steps.generate-autopilot-matrix.outputs.matrix }}

    steps:
      - name: "Workflow run :: Checkout"
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: "Generate :: Smoke test matrix"
        id: generate-smoketest-matrix
        run: |
          echo 'smoketests=["check-network-conformance-calico"]' >> "$GITHUB_OUTPUT"

      - name: "Generate :: Autopilot test matrix"
        id: generate-autopilot-matrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          k8sVersion="$(./vars.sh kubernetes_version)"
          majorVersion="${k8sVersion%%.*}"
          minorVersion=${k8sVersion#$majorVersion.}
          minorVersion="${minorVersion%%.*}"

          {
            printf matrix=
            hack/tools/gen-matrix.sh "$majorVersion.$(($minorVersion - 1))" "$majorVersion.$minorVersion"
          } >> "$GITHUB_OUTPUT"

  build-k0s:
    strategy:
      matrix:
        target-os: [linux]
        target-arch: [amd64]

    name: "Build :: k0s :: ${{ matrix.target-os }}-${{ matrix.target-arch }}"
    uses: ./.github/workflows/build-k0s.yml
    with:
      target-os: ${{ matrix.target-os }}
      target-arch: ${{ matrix.target-arch }}


  smoketests:
    strategy:
      fail-fast: false
      matrix:
        smoke-suite: ${{ fromJson(needs.prepare.outputs.smoketest-matrix) }}

    name: "Smoke tests :: ${{ matrix.smoke-suite }}"
    needs: [prepare, build-k0s]
    runs-on: ubuntu-22.04

    steps:
      - name: Disk before everything
        run: df -h

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Prepare build environment
        run: .github/workflows/prepare-build-env.sh
      
      - name: Prepare docker for ipv6 dualstack tests
        if: contains(matrix.smoke-suite, 'dualstack')
        run: .github/workflows/prepare-docker-ipv6.sh

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download compiled executable
        uses: actions/download-artifact@v3
        with:
          name: k0s-linux-amd64

      - name: k0s sysinfo
        run: |
          chmod +x k0s
          ./k0s sysinfo

      - name: Cache airgap image bundle
        id: cache-airgap-image-bundle
        if: contains(matrix.smoke-suite, 'airgap')
        uses: actions/cache@v3
        with:
          key: ${{ needs.build-airgap-image-bundle.outputs.cache-key }}
          path: airgap-image-bundle-linux-amd64.tar

      - name: Disk before test itself
        run: df -h

      - name: Run inttest
        env:
          NEEDS_AIRGAP_IMAGE_BUNDLE: ${{ contains(matrix.smoke-suite, 'airgap') }}
        run: |
          [ "$NEEDS_AIRGAP_IMAGE_BUNDLE" != true ] || [ -f airgap-image-bundle-linux-amd64.tar ] || {
            echo Airgap image bundle file missing!
            exit 1
          }
          make -C inttest ${{ matrix.smoke-suite }}

      - name: Collect k0s logs and support bundle
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: smoketests-${{ matrix.smoke-suite }}-files
          path: |
            /tmp/*.log
            /tmp/support-bundle.tar.gz

      - name: Collect sonobuoy results
        if: failure() && contains(matrix.smoke-suite, 'conformance')
        uses: actions/upload-artifact@v3
        with:
          name: smoketests-${{ matrix.smoke-suite }}-sonobuoy-results
          path: /tmp/*_sonobuoy_*.tar.gz
      
      - name: Disk after test itself
        if: always()
        run: df -h
